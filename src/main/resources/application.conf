
route-demo {

}

dispatcherDemo {
  writer-dispatcher {
    type = Dispatcher   //Dispatcher类型,Dispatcher  PinnedDispatcher
    executor = "fork-join-executor"   //底层实现方式  fork-join-executor  thread-pool-executor

    fork-join-executor {  //执行器方式的参数
      parallelism-min = 2
      parallelism-factor = 2.0
      parallelism-max = 10
    }
    throughput = 100
  }

  io-dispatcher {
    type = PinnedDispatcher   //Dispatcher类型,Dispatcher  PinnedDispatcher
    executor = "thread-pool-executor"   //底层实现方式  fork-join-executor  thread-pool-executor

    thread-pool-executor {
      core-pool-size-min = 2
      core-pool-size-factor = 2.0
      core-pool-size-max = 10
    }
    throughput = 100
  }
}


hello-akka-system {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "ERROR"


  bounded-mailbox {
    //配置邮箱类型
    mailbox-type = "akka.dispatch.BoundedMailbox"
    //配置邮箱容量
    mailbox-capacity = 1000
    //当邮箱满时 等待插入消息的超时时间
    mailbox-push-timeout-time = 10s
  }

  unbounded-mailbox {
    //配置邮箱类型
    mailbox-type = "akka.dispatch.UnboundedMailbox"
  }

  akka.actor.mailbox.requirements {
    //建立映射关系
    "akka.dispatch.BoundedMessageQueueSemantics" = bounded-mailbox
    "akka.dispatch.UnboundedMessageQueueSemantics" = unbounded-mailbox
  }

  my-pinned-dispatcher {
    executor = "thread-pool-executor"
    mailbox-requirement = akka.dispatch.BoundedMessageQueueSemantics
    type = PinnedDispatcher
    thread-pool-executor {
      core-pool-size-min = 2
      core-pool-size-factor = 2.0
      core-pool-size-max = 10
    }
    throughput = 1
  }
}